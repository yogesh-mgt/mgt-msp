<?php
 namespace Mgt\Varnish\Model\Plugin; use Zend\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto F1ba9; Cfcfd: $this->coreLogger = $coreLogger; goto B825d; B825d: $this->logger = $logger; goto d1c03; ce845: $this->socketAdapterFactory = $socketAdapterFactory; goto f63dc; F1ba9: $this->cacheServer = $cacheServer; goto ce845; c7fdc: $this->objectManager = $objectManager; goto c56eb; c56eb: $this->urlCollection = $urlCollection; goto Cfcfd; f63dc: $this->varnishConfig = $varnishConfig; goto c7fdc; d1c03: } public function sendPurgeRequest($tagsPattern) { goto c7809; Eb913: f80c4: goto E6d2a; A0e85: $tagsPattern = []; goto C75f8; de038: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto Ae31a; E2566: a786b: goto A06f1; e18ac: return true; goto A039b; Abf13: return true; goto Eb913; E1536: aa3bb: goto A7666; A52d9: $this->_sendPurgeRequest($headers); goto de038; dbdbe: aa0d3: goto b4c12; E5384: switch ($tagsPattern) { case "\56\52": $logMessage = "\124\x68\x65\40\x77\150\157\154\x65\x20\x56\x61\x72\x6e\151\x73\x68\x20\103\x61\143\150\x65\40\150\x61\163\40\x62\145\x65\x6e\x20\x70\165\162\147\x65\x64"; goto a57da; } goto E1536; A7666: a57da: goto f42e1; cfb3e: d3f58: goto a17c8; C75f8: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); Fd5f5: } goto dbdbe; f42e1: goto a786b; goto D3f72; E14da: if (true === is_array($tagsPattern)) { goto d3482; } goto E2d80; b738b: foreach ($tagsPattern as $tag) { goto E76a3; Ed491: $tags[] = $tag; goto abab0; abab0: self::$tagsRegistry[$tag] = $tag; goto F6808; E76a3: if (isset(self::$tagsRegistry[$tag])) { goto f40f8; } goto Ed491; F6808: f40f8: goto F5987; F5987: ea19e: goto Ac3db; Ac3db: } goto B4dc3; B4dc3: d808e: goto B5bd0; c7809: $tags = []; goto E14da; A06f1: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto A52d9; b4c12: $logMessage = sprintf("\x56\141\162\x6e\151\x73\x68\x20\x43\x61\143\x68\x65\x20\160\x75\x72\147\145\x64\40\x62\x79\x20\x66\x6f\154\x6c\157\x77\151\156\147\x20\x74\x61\x67\163\72\40\x25\163", print_r($tags, true)); goto b5c66; d3f47: $this->addToQueue($tags); goto cfb3e; b5c66: $tagsPattern = implode("\174", array_unique($tagsPattern)); goto E2566; E6d2a: $pattern = "\x28\50\136\174\x2c\51\45\x73\x28\x2c\x7c\x24\51\x29"; goto A0e85; Ae31a: if (!(true === $isCacheWarmerEnabled)) { goto d3f58; } goto d3f47; a17c8: $this->logMessage($logMessage); goto e18ac; B5bd0: if ($tags) { goto f80c4; } goto Abf13; E2d80: $logMessage = ''; goto E5384; D3f72: d3482: goto b738b; A039b: } public function addToQueue(array $tags) { goto c3926; B5095: try { goto E85aa; b7926: if (!count($urls)) { goto a9e59; } goto Fe724; A8091: $urlQueue->addToQueue($urls); goto Acb32; E85aa: $urls = []; goto a5221; ecfd5: e1782: goto b7926; Fe724: $urlQueue = $this->objectManager->create("\115\147\x74\x5c\126\x61\x72\x6e\151\x73\x68\134\115\157\x64\x65\154\134\125\162\154\121\165\145\165\145"); goto A8091; Acb32: a9e59: goto Fc6b2; C0495: foreach ($this->urlCollection as $url) { $urls[] = ["\163\164\157\x72\x65\x5f\x69\x64" => $url->getStoreId(), "\x70\141\164\150" => $url->getPath(), "\160\162\151\157\162\151\164\171" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; f6acf: } goto ecfd5; a5221: $this->urlCollection->addTagsFilter($tags); goto C0495; Fc6b2: } catch (\Exception $e) { $errorMessage = sprintf("\101\x6e\40\145\x72\x72\x6f\162\x20\x6f\143\x63\165\162\x72\145\144\40\x64\x75\x72\151\156\x67\40\141\x64\x64\x69\x6e\147\x20\x74\157\x20\161\x75\145\165\145\54\x20\x65\162\162\x6f\x72\40\155\145\163\163\141\x67\145\72\x20\x25\163", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto b547d; b547d: D85a3: goto B0e70; c3926: if (!count($tags)) { goto D85a3; } goto B5095; B0e70: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto A45d4; eee35: $this->logMessage($logMessage); goto e20cc; Cb190: $headers = ["\110\x4f\x53\124" => $uri->getHost()]; goto d942c; d942c: $this->_sendPurgeRequest($headers); goto c28cc; A45d4: $uri = new Uri($store->getBaseUrl()); goto Cb190; c28cc: $logMessage = sprintf("\123\x74\157\x72\145\40\x77\x69\164\x68\x20\142\x61\x73\x65\x20\165\x72\x6c\x3a\40\x25\x73\x20\50\x49\x44\x3a\x20\x25\x73\51\40\150\141\x73\x20\142\x65\145\x6e\x20\x70\x75\162\x67\145\144", $store->getBaseUrl(), $store->getStoreId()); goto eee35; e20cc: } public function purgeUrlRequest($url) { goto F0a06; A3004: $this->logMessage($logMessage); goto A7e39; D0456: $headers = ["\110\117\123\124" => $uri->getHost()]; goto d955a; d955a: $this->_sendPurgeRequest($headers, $uri->getPath()); goto Be6cf; Be6cf: $logMessage = sprintf("\x55\162\154\72\40\x25\163\40\150\141\x73\40\142\145\x65\156\40\160\165\x72\x67\145\x64", $url); goto A3004; F0a06: $uri = new Uri($url); goto D0456; A7e39: } protected function _sendPurgeRequest(array $headers, $path = null) { goto f18f9; C63db: $socketAdapter->setOptions(["\x74\151\155\145\x6f\165\x74" => self::REQUEST_TIMEOUT]); goto D9803; f18f9: $socketAdapter = $this->socketAdapterFactory->create(); goto C63db; D9803: $servers = $this->getCacheServers(); goto C7beb; c4430: bee51: goto d38e1; C7beb: foreach ($servers as $server) { try { goto B73cc; A7d45: $socketAdapter->close(); goto ac8fd; A7f31: $server->setPath($path); goto b0434; c4e10: $socketAdapter->write("\x50\x55\122\x47\105", $server, "\61\x2e\x31", $headers); goto A7d45; B73cc: if (!(null !== $path)) { goto e1a8e; } goto A7f31; b0434: e1a8e: goto b3d11; b3d11: $socketAdapter->connect($server->getHost(), $server->getPort()); goto c4e10; ac8fd: } catch (\Exception $e) { goto bf1b2; bf1b2: $errorMessage = sprintf("\x41\x6e\40\145\x72\162\x6f\162\x20\157\x63\x63\x75\162\x72\145\144\x20\x64\x75\162\151\156\147\x20\160\x75\x72\147\x69\156\x67\x2c\40\145\162\x72\157\x72\40\155\x65\163\163\x61\147\x65\72\x20\42\45\x73\42", $e->getMessage()); goto F1e95; B8957: throw new \Exception($errorMessage); goto eb1db; F1e95: $this->logMessage($errorMessage, true); goto B8957; eb1db: } e0245: } goto c4430; d38e1: } protected function logMessage($message, $force = false) { goto E08a9; Da19e: if (!(true === $isDebugModeEnabled || true === $force)) { goto F4cf0; } goto A1483; A1483: $this->logger->debug($message); goto ff845; E08a9: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto Da19e; ff845: F4cf0: goto d0782; d0782: } protected function getCacheServers() { goto D976e; fa469: foreach ($serverList as $server) { goto ae7e5; E6275: $cacheServers[] = $uri; goto e048a; ccd00: $uri->setScheme("\150\164\x74\x70"); goto A625f; eff28: $uri->setPort($port); goto f2c29; ae7e5: list($host, $port) = explode("\x3a", $server); goto E8f3c; A625f: $uri->setQuery(null); goto E6275; ac166: $uri->setHost($host); goto eff28; E8f3c: $uri = new Uri(); goto ac166; e048a: e9e25: goto f37be; f2c29: $uri->setPath("\57"); goto ccd00; f37be: } goto Ddcae; Ddcae: f83a7: goto Aeec1; Aeec1: return $cacheServers; goto d5d6c; c8ffc: $serverList = $this->varnishConfig->getServerList(); goto fa469; D976e: $cacheServers = []; goto c8ffc; d5d6c: } }
